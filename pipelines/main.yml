pr:
  - main
trigger:
  batch: "true"
  branches:
    include: 
      - '*'
  tags:
    include:
    - '*'
  paths:
    exclude: 
      - '_test-agent/*'
      - '.vscode/*'
      - '.devcontainer/*'

parameters:
  - name: tags
    type: string
    default: "1.0.5,0.7.11"

resources: 
  repositories:
    - repository: repo_1_0_5
      type: github
      endpoint: "azure-pipelines-terraform-rc (1)"
      name: jason-johnson/azure-pipelines-tasks-terraform
      ref: refs/tags/${{ split(parameters.tags, ',')[0] }}
    - repository: repo_0_7_11
      type: github
      endpoint: "azure-pipelines-terraform-rc (1)"
      name: jason-johnson/azure-pipelines-tasks-terraform
      ref: refs/tags/${{ split(parameters.tags, ',')[1] }}
  
variables:
  Agent.Source.Git.ShallowFetchDepth: 0
  tf_variables_secure_file: 4a0c36e2-bb51-41ed-87b1-2e668c64bb69
  marketplace_publisher: JasonBJohnson

pool:
  vmImage: ubuntu-latest

name: $(GitVersion.FullSemVer)

stages:
- stage: setup
  variables:
    - group: build
  jobs:
  - job: version
    steps:
    - task: gitversion/setup@0
      displayName: install GitVersion
      inputs:
        versionSpec: '5.x'
    - task: gitversion/execute@0
      displayName: set version
      name: version

  - job: tags
    steps:
    - script: scripts/max_tags.sh
      name: tags

- stage: build
  dependsOn: setup
  variables:
    - name: GitVersion.SemVer
      value: $[ stageDependencies.setup.version.outputs['version.GitVersion.SemVer'] ]
    - name: GitVersion.Major
      value: $[ stageDependencies.setup.version.outputs['version.GitVersion.Major'] ]
    - name: GitVersion.Minor
      value: $[ stageDependencies.setup.version.outputs['version.GitVersion.Minor'] ]
    - name: GitVersion.Patch
      value: $[ stageDependencies.setup.version.outputs['version.GitVersion.Patch'] ]
  jobs:
  - template: templates/build_tasks.yml
    parameters:
      instance: main

  - ${{ each tag in split(parameters.tags, ',')}}:
    - template: templates/build_tasks.yml
      parameters:
        checkout: repo_${{ replace(tag, '.', '_') }}
        instance: ${{ replace(tag, '.', '_') }}

  - job: terraform_plan
    steps:
      - template: templates/build_npm.yml
        parameters:
          workingDir: $(System.DefaultWorkingDirectory)/views/terraform-plan
          artifact: terraform_plan

      # Unfortunately, terraform plan view needs some work to have it complay with test_npm.yml so we hard code the steps for now
      - task: Npm@1
        displayName: test
        inputs:
          workingDir: $(System.DefaultWorkingDirectory)/views/terraform-plan
          command: custom
          customCommand: run test
      - task: PublishTestResults@2
        displayName: test - publish results
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: 'results.xml'
          searchFolder: $(System.DefaultWorkingDirectory)/views/terraform-plan/.tests

  - job: terraform_templates
    steps:
      - task: CopyFiles@2
        displayName: terraform templates
        inputs:
          contents: |   
            templates/**/*
          targetFolder: $(Build.ArtifactStagingDirectory)/terraform_templates
      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)/terraform_templates'
          artifactName: terraform_templates

  - job: terraform_extension
    steps:
      - task: Npm@1
        displayName: version
        inputs:
          workingDir: $(System.DefaultWorkingDirectory)
          command: custom
          customCommand: version $(GitVersion.SemVer) --no-git-tag-version --allow-same-version
      - task: Npm@1
        displayName: install
        inputs:
          workingDir: $(System.DefaultWorkingDirectory)
          command: ci
      - task: CopyFiles@2
        displayName: stage extension
        inputs:
          contents: |
            !node_modules/.bin/*
            screenshots/*
            overview.md
            package*.json
            vss-extension*.json
            vss-extension-icon.png
            **/poll_task_install.sh
          targetFolder: $(Build.ArtifactStagingDirectory)/terraform_extension
      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)/terraform_extension'
          artifactName: terraform_extension

- stage: publish
  dependsOn: build
  variables:
    - group: env_rc
  jobs:
  - deployment: publish_private_rc
    displayName: publish private rc
    environment: marketplace_rc
    variables:
        - name: GitVersion.SemVer
          value: $[ stageDependencies.setup.version.outputs['version.GitVersion.SemVer'] ]
        - name: GitVersion.Major
          value: $[ stageDependencies.setup.version.outputs['version.GitVersion.Major'] ]
        - name: GitVersion.Minor
          value: $[ stageDependencies.setup.version.outputs['version.GitVersion.Minor'] ]
        - name: GitVersion.Patch
          value: $[ stageDependencies.setup.version.outputs['version.GitVersion.Patch'] ]
    strategy:
      runOnce:
        deploy:
          steps:    
          - task: DownloadPipelineArtifact@2
            displayName: download terraform extension
            inputs: 
              artifact: terraform_extension
              path: $(System.DefaultWorkingDirectory)
          - task: DownloadPipelineArtifact@2
            displayName: download terraform_installer@2
            inputs: 
              artifact: terraform_installer_main
              path: $(System.DefaultWorkingDirectory)/tasks/terraform-installer/v2
          - task: DownloadPipelineArtifact@2
            displayName: download terraform_cli@2
            inputs:
              artifact: terraform_cli_main
              path: $(System.DefaultWorkingDirectory)/tasks/terraform-cli/v2
          - task: DownloadPipelineArtifact@2
            displayName: download views terraform plan
            inputs:
              artifact: terraform_plan
              path: $(System.DefaultWorkingDirectory)/views/terraform-plan
          - ${{ each tag in split(parameters.tags, ',')}}:
            - task: DownloadPipelineArtifact@2
              displayName: download terraform_installer@${{ split(tag, '.')[0] }}
              inputs: 
                artifact: terraform_installer_${{ replace(tag, '.', '_') }}
                path: $(System.DefaultWorkingDirectory)/tasks/terraform-installer/v${{ split(tag, '.')[0] }}
            - task: DownloadPipelineArtifact@2
              displayName: download terraform_cli@${{ split(tag, '.')[0] }}
              inputs: 
                artifact: terraform_cli_${{ replace(tag, '.', '_') }}
                path: $(System.DefaultWorkingDirectory)/tasks/terraform-cli/v${{ split(tag, '.')[0] }}
          - script: |
              find . -type f -maxdepth 5 -print
            displayName: display folders
